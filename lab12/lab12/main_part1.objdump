
C:/Users/zs35/Desktop/main_part1.elf:     file format elf32-littlenios2
C:/Users/zs35/Desktop/main_part1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000f74 memsz 0x00000f74 flags r-x
    LOAD off    0x00001f94 vaddr 0x00000f94 paddr 0x000015c0 align 2**12
         filesz 0x0000062c memsz 0x0000062c flags rw-
    LOAD off    0x00002bec vaddr 0x00001bec paddr 0x00001bec align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000e04  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  00000f6c  00000f6c  00001f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000062c  00000f94  000015c0  00001f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00001bec  00001bec  00002bec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000398  00000000  00000000  000025e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007bc  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005291  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000198b  00000000  00000000  000083cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000414a  00000000  00000000  00009d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005b0  00000000  00000000  0000dea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012bd  00000000  00000000  0000e454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e60  00000000  00000000  0000f711  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00010574  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00010598  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00011dcd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00011dd0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011dd3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011dd4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00011dd5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00011dd9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00011ddd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00011de1  2**0
                  CONTENTS, READONLY
 25 .jdi          00004412  00000000  00000000  00011dec  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00030dbc  00000000  00000000  000161fe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00000f6c l    d  .rodata	00000000 .rodata
00000f94 l    d  .rwdata	00000000 .rwdata
00001bec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main_part1.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000f94 l     O .rwdata	0000002c LCD
00000fc0 l     O .rwdata	0000002c UART
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000378 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000974 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00001194 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000da0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000026c g     F .text	0000003c alt_main
00001c08 g     O .bss	00000100 alt_irq
000015c0 g       *ABS*	00000000 __flash_rwdata_start
00000478 g     F .text	00000010 alt_up_character_lcd_send_cmd
00000738 g     F .text	00000080 alt_up_rs232_read_fd
00000000  w      *UND*	00000000 __errno
000003b4 g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001c04 g     O .bss	00000004 errno
00001bf0 g     O .bss	00000004 alt_argv
00009594 g       *ABS*	00000000 _gp
00001014 g     O .rwdata	00000180 alt_fd_list
000009ec g     F .text	00000070 alt_find_dev
00000448 g     F .text	00000020 alt_up_character_lcd_write_fd
000006ec g     F .text	0000004c alt_up_rs232_read_data
00000c44 g     F .text	0000003c alt_icache_flush
000015a4 g     O .rwdata	00000004 alt_max_fd
000006c0 g     F .text	0000000c alt_up_rs232_check_parity
00000a7c g     F .text	000000bc alt_irq_register
000015bc g     O .rwdata	00000004 _global_impure_ptr
00001d08 g       *ABS*	00000000 __bss_end
00000b90 g     F .text	000000ac alt_tick
00000b5c g     F .text	00000034 alt_alarm_stop
00001bf8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00000fec g     O .rwdata	00000028 alt_dev_null
00000488 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
00000970 g     F .text	00000004 alt_dcache_flush_all
000015c0 g       *ABS*	00000000 __ram_rwdata_end
0000159c g     O .rwdata	00000008 alt_dev_list
00000f94 g       *ABS*	00000000 __ram_rodata_end
000007e0 g     F .text	00000070 alt_up_rs232_write_fd
00001d08 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000334 g     F .text	00000044 alt_avalon_timer_sc_init
0000041c g     F .text	0000002c alt_up_character_lcd_write
00000da4 g     F .text	000001b0 __call_exitprocs
00000168 g     F .text	0000003c _start
00001bfc g     O .bss	00000004 _alt_tick_rate
00001c00 g     O .bss	00000004 _alt_nticks
000002c8 g     F .text	0000006c alt_sys_init
0000052c g     F .text	00000090 alt_up_character_lcd_shift_display
000007b8 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000004c0 g     F .text	0000006c alt_up_character_lcd_erase_pos
00000f94 g       *ABS*	00000000 __ram_rwdata_start
00000f6c g       *ABS*	00000000 __ram_rodata_start
00000cb8 g     F .text	00000074 memcmp
00001d08 g       *ABS*	00000000 __alt_stack_base
00000850 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
0000097c g     F .text	00000070 alt_dev_llist_insert
00001bec g       *ABS*	00000000 __bss_start
000001a4 g     F .text	00000004 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00001bf4 g     O .bss	00000004 alt_envp
000005bc g     F .text	00000090 alt_up_character_lcd_shift_cursor
000015a8 g     O .rwdata	00000004 alt_errno
000006a0 g     F .text	00000020 alt_up_character_lcd_open_dev
00000468 g     F .text	00000010 alt_up_character_lcd_init
00000f6c g       *ABS*	00000000 __flash_rodata_start
000006cc g     F .text	00000020 alt_up_rs232_open_dev
000002a8 g     F .text	00000020 alt_irq_init
00000b38 g     F .text	00000024 alt_release_fd
000004a4 g     F .text	0000001c alt_up_character_lcd_cursor_off
000015b8 g     O .rwdata	00000004 _impure_ptr
00001bec g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00001594 g     O .rwdata	00000008 alt_fs_list
0000086c g     F .text	00000018 alt_up_rs232_enable_read_interrupt
000007c8 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000015c0 g       *ABS*	00000000 _edata
00001d08 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000c3c g     F .text	00000008 altera_nios2_qsys_irq_init
00000c80 g     F .text	00000038 exit
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000003d0 g     F .text	0000004c alt_up_character_lcd_string
00000f54 g     F .text	00000014 _exit
00000d2c g     F .text	00000074 strlen
00000a5c g     F .text	00000020 alt_icache_flush_all
0000064c g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
000015ac g     O .rwdata	00000004 alt_priority_mask
000015b0 g     O .rwdata	00000008 alt_alarm_list
00000884 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00000894 g     F .text	000000dc close
000001a8 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000034 	movhi	r16,0
 100:	84070204 	addi	r16,r16,7176
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 16c:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 174:	d6a56514 	ori	gp,gp,38292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 17c:	1086fb14 	ori	r2,r2,7148

    movhi r3, %hi(__bss_end)
 180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 184:	18c74214 	ori	r3,r3,7432

    beq r2, r3, 1f
 188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
 18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 198:	00001a80 	call	1a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 19c:	000026c0 	call	26c <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <main>:

#include "altera_up_avalon_character_lcd.h"
#include "altera_up_avalon_rs232.h"

int main( void )
{
 1a4:	003fff06 	br	1a4 <main>

000001a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1a8:	deffff04 	addi	sp,sp,-4
 1ac:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1b0:	01000034 	movhi	r4,0
 1b4:	21057004 	addi	r4,r4,5568
 1b8:	00c00034 	movhi	r3,0
 1bc:	18c3e504 	addi	r3,r3,3988

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1c0:	20c00926 	beq	r4,r3,1e8 <alt_load+0x40>
 1c4:	01800034 	movhi	r6,0
 1c8:	31857004 	addi	r6,r6,5568
  {
    while( to != end )
 1cc:	19800626 	beq	r3,r6,1e8 <alt_load+0x40>
 1d0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
 1d4:	20800017 	ldw	r2,0(r4)
 1d8:	18800015 	stw	r2,0(r3)
 1dc:	1947883a 	add	r3,r3,r5
 1e0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1e4:	30fffb1e 	bne	r6,r3,1d4 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1e8:	01000034 	movhi	r4,0
 1ec:	21000804 	addi	r4,r4,32
 1f0:	00c00034 	movhi	r3,0
 1f4:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1f8:	20c00926 	beq	r4,r3,220 <alt_load+0x78>
 1fc:	01800034 	movhi	r6,0
 200:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
 204:	19800626 	beq	r3,r6,220 <alt_load+0x78>
 208:	01400104 	movi	r5,4
    {
      *to++ = *from++;
 20c:	20800017 	ldw	r2,0(r4)
 210:	18800015 	stw	r2,0(r3)
 214:	1947883a 	add	r3,r3,r5
 218:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 21c:	30fffb1e 	bne	r6,r3,20c <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 220:	01000034 	movhi	r4,0
 224:	2103db04 	addi	r4,r4,3948
 228:	00c00034 	movhi	r3,0
 22c:	18c3db04 	addi	r3,r3,3948

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 230:	20c00926 	beq	r4,r3,258 <alt_load+0xb0>
 234:	01800034 	movhi	r6,0
 238:	3183e504 	addi	r6,r6,3988
  {
    while( to != end )
 23c:	19800626 	beq	r3,r6,258 <alt_load+0xb0>
 240:	01400104 	movi	r5,4
    {
      *to++ = *from++;
 244:	20800017 	ldw	r2,0(r4)
 248:	18800015 	stw	r2,0(r3)
 24c:	1947883a 	add	r3,r3,r5
 250:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 254:	30fffb1e 	bne	r6,r3,244 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 258:	00009700 	call	970 <alt_dcache_flush_all>
  alt_icache_flush_all();
 25c:	0000a5c0 	call	a5c <alt_icache_flush_all>
}
 260:	dfc00017 	ldw	ra,0(sp)
 264:	dec00104 	addi	sp,sp,4
 268:	f800283a 	ret

0000026c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 26c:	defffe04 	addi	sp,sp,-8
 270:	dfc00115 	stw	ra,4(sp)
 274:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 278:	0009883a 	mov	r4,zero
 27c:	00002a80 	call	2a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 280:	00002c80 	call	2c8 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 284:	d1219617 	ldw	r4,-31144(gp)
 288:	d1619717 	ldw	r5,-31140(gp)
 28c:	d1a19817 	ldw	r6,-31136(gp)
 290:	00001a40 	call	1a4 <main>
 294:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 298:	01000044 	movi	r4,1
 29c:	00008940 	call	894 <close>
  exit (result);
 2a0:	8009883a 	mov	r4,r16
 2a4:	0000c800 	call	c80 <exit>

000002a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2a8:	deffff04 	addi	sp,sp,-4
 2ac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2b0:	0000c3c0 	call	c3c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2b4:	00800044 	movi	r2,1
 2b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2bc:	dfc00017 	ldw	ra,0(sp)
 2c0:	dec00104 	addi	sp,sp,4
 2c4:	f800283a 	ret

000002c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2c8:	defffd04 	addi	sp,sp,-12
 2cc:	dfc00215 	stw	ra,8(sp)
 2d0:	dc400115 	stw	r17,4(sp)
 2d4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 2d8:	01201014 	movui	r4,32832
 2dc:	000b883a 	mov	r5,zero
 2e0:	01800044 	movi	r6,1
 2e4:	01c0fa04 	movi	r7,1000
 2e8:	00003340 	call	334 <alt_avalon_timer_sc_init>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, LCD);
 2ec:	04000034 	movhi	r16,0
 2f0:	8403e504 	addi	r16,r16,3988
 2f4:	8009883a 	mov	r4,r16
 2f8:	00004680 	call	468 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2fc:	04400034 	movhi	r17,0
 300:	8c456704 	addi	r17,r17,5532
 304:	8009883a 	mov	r4,r16
 308:	880b883a 	mov	r5,r17
 30c:	000097c0 	call	97c <alt_dev_llist_insert>
 310:	01000034 	movhi	r4,0
 314:	2103f004 	addi	r4,r4,4032
 318:	880b883a 	mov	r5,r17
 31c:	000097c0 	call	97c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( UART, UART);
}
 320:	dfc00217 	ldw	ra,8(sp)
 324:	dc400117 	ldw	r17,4(sp)
 328:	dc000017 	ldw	r16,0(sp)
 32c:	dec00304 	addi	sp,sp,12
 330:	f800283a 	ret

00000334 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 334:	deffff04 	addi	sp,sp,-4
 338:	dfc00015 	stw	ra,0(sp)
 33c:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 340:	00c00034 	movhi	r3,0
 344:	18c6ff04 	addi	r3,r3,7164
 348:	18800017 	ldw	r2,0(r3)
 34c:	1000011e 	bne	r2,zero,354 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
 350:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 354:	008001c4 	movi	r2,7
 358:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 35c:	3009883a 	mov	r4,r6
 360:	01800034 	movhi	r6,0
 364:	3180de04 	addi	r6,r6,888
 368:	0000a7c0 	call	a7c <alt_irq_register>
#endif  
}
 36c:	dfc00017 	ldw	ra,0(sp)
 370:	dec00104 	addi	sp,sp,4
 374:	f800283a 	ret

00000378 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 378:	defffe04 	addi	sp,sp,-8
 37c:	dfc00115 	stw	ra,4(sp)
 380:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 384:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 388:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 38c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 390:	00bfff84 	movi	r2,-2
 394:	8084703a 	and	r2,r16,r2
 398:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 39c:	0000b900 	call	b90 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 3a0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 3a4:	dfc00117 	ldw	ra,4(sp)
 3a8:	dc000017 	ldw	r16,0(sp)
 3ac:	dec00204 	addi	sp,sp,8
 3b0:	f800283a 	ret

000003b4 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
 3b4:	2800021e 	bne	r5,zero,3c0 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
 3b8:	2005883a 	mov	r2,r4
 3bc:	00000106 	br	3c4 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
 3c0:	20801014 	ori	r2,r4,64
 3c4:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
 3c8:	10802014 	ori	r2,r2,128
 3cc:	f800283a 	ret

000003d0 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 3d0:	28c00003 	ldbu	r3,0(r5)
 3d4:	18803fcc 	andi	r2,r3,255
 3d8:	1080201c 	xori	r2,r2,128
 3dc:	10bfe004 	addi	r2,r2,-128
 3e0:	10000d26 	beq	r2,zero,418 <alt_up_character_lcd_string+0x48>
 3e4:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 3e8:	20800a17 	ldw	r2,40(r4)
 3ec:	1185883a 	add	r2,r2,r6
 3f0:	18c03fcc 	andi	r3,r3,255
 3f4:	18c0201c 	xori	r3,r3,128
 3f8:	18ffe004 	addi	r3,r3,-128
 3fc:	10c00025 	stbio	r3,0(r2)
		++ptr;
 400:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 404:	28c00003 	ldbu	r3,0(r5)
 408:	18803fcc 	andi	r2,r3,255
 40c:	1080201c 	xori	r2,r2,128
 410:	10bfe004 	addi	r2,r2,-128
 414:	103ff41e 	bne	r2,zero,3e8 <alt_up_character_lcd_string+0x18>
 418:	f800283a 	ret

0000041c <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 41c:	30000926 	beq	r6,zero,444 <alt_up_character_lcd_write+0x28>
 420:	000f883a 	mov	r7,zero
 424:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 428:	20800a17 	ldw	r2,40(r4)
 42c:	1205883a 	add	r2,r2,r8
 430:	3947883a 	add	r3,r7,r5
 434:	18c00007 	ldb	r3,0(r3)
 438:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 43c:	3a0f883a 	add	r7,r7,r8
 440:	31fff91e 	bne	r6,r7,428 <alt_up_character_lcd_write+0xc>
 444:	f800283a 	ret

00000448 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 448:	deffff04 	addi	sp,sp,-4
 44c:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 450:	21000017 	ldw	r4,0(r4)
 454:	000041c0 	call	41c <alt_up_character_lcd_write>
	return 0;
}
 458:	0005883a 	mov	r2,zero
 45c:	dfc00017 	ldw	ra,0(sp)
 460:	dec00104 	addi	sp,sp,4
 464:	f800283a 	ret

00000468 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 468:	20c00a17 	ldw	r3,40(r4)
 46c:	00800044 	movi	r2,1
 470:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 474:	f800283a 	ret

00000478 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 478:	20800a17 	ldw	r2,40(r4)
 47c:	29403fcc 	andi	r5,r5,255
 480:	11400025 	stbio	r5,0(r2)
}
 484:	f800283a 	ret

00000488 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 488:	deffff04 	addi	sp,sp,-4
 48c:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 490:	014003c4 	movi	r5,15
 494:	00004780 	call	478 <alt_up_character_lcd_send_cmd>
}
 498:	dfc00017 	ldw	ra,0(sp)
 49c:	dec00104 	addi	sp,sp,4
 4a0:	f800283a 	ret

000004a4 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 4a4:	deffff04 	addi	sp,sp,-4
 4a8:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 4ac:	01400304 	movi	r5,12
 4b0:	00004780 	call	478 <alt_up_character_lcd_send_cmd>
}
 4b4:	dfc00017 	ldw	ra,0(sp)
 4b8:	dec00104 	addi	sp,sp,4
 4bc:	f800283a 	ret

000004c0 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 4c0:	defffd04 	addi	sp,sp,-12
 4c4:	dfc00215 	stw	ra,8(sp)
 4c8:	dc400115 	stw	r17,4(sp)
 4cc:	dc000015 	stw	r16,0(sp)
 4d0:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 4d4:	008009c4 	movi	r2,39
 4d8:	11400e36 	bltu	r2,r5,514 <alt_up_character_lcd_erase_pos+0x54>
 4dc:	04400044 	movi	r17,1
 4e0:	89800c36 	bltu	r17,r6,514 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 4e4:	2809883a 	mov	r4,r5
 4e8:	300b883a 	mov	r5,r6
 4ec:	00003b40 	call	3b4 <get_DDRAM_addr>
 4f0:	8009883a 	mov	r4,r16
 4f4:	11403fcc 	andi	r5,r2,255
 4f8:	00004780 	call	478 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 4fc:	80800a17 	ldw	r2,40(r16)
 500:	1445883a 	add	r2,r2,r17
 504:	00c00084 	movi	r3,2
 508:	10c00025 	stbio	r3,0(r2)
 50c:	0005883a 	mov	r2,zero
 510:	00000106 	br	518 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
 514:	00bfffc4 	movi	r2,-1
}
 518:	dfc00217 	ldw	ra,8(sp)
 51c:	dc400117 	ldw	r17,4(sp)
 520:	dc000017 	ldw	r16,0(sp)
 524:	dec00304 	addi	sp,sp,12
 528:	f800283a 	ret

0000052c <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 52c:	defffa04 	addi	sp,sp,-24
 530:	dfc00515 	stw	ra,20(sp)
 534:	dd000415 	stw	r20,16(sp)
 538:	dcc00315 	stw	r19,12(sp)
 53c:	dc800215 	stw	r18,8(sp)
 540:	dc400115 	stw	r17,4(sp)
 544:	dc000015 	stw	r16,0(sp)
 548:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
 54c:	28001326 	beq	r5,zero,59c <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 550:	0140020e 	bge	zero,r5,55c <alt_up_character_lcd_shift_display+0x30>
 554:	05000704 	movi	r20,28
 558:	00000106 	br	560 <alt_up_character_lcd_shift_display+0x34>
 55c:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 560:	2800010e 	bge	r5,zero,568 <alt_up_character_lcd_shift_display+0x3c>
 564:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
 568:	00bfffc4 	movi	r2,-1
 56c:	28a1883a 	add	r16,r5,r2
 570:	80c03fcc 	andi	r3,r16,255
 574:	10803fcc 	andi	r2,r2,255
 578:	18800826 	beq	r3,r2,59c <alt_up_character_lcd_shift_display+0x70>
 57c:	04bfffc4 	movi	r18,-1
 580:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 584:	9809883a 	mov	r4,r19
 588:	a1403fcc 	andi	r5,r20,255
 58c:	00004780 	call	478 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 590:	84a1883a 	add	r16,r16,r18
 594:	80803fcc 	andi	r2,r16,255
 598:	147ffa1e 	bne	r2,r17,584 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 59c:	dfc00517 	ldw	ra,20(sp)
 5a0:	dd000417 	ldw	r20,16(sp)
 5a4:	dcc00317 	ldw	r19,12(sp)
 5a8:	dc800217 	ldw	r18,8(sp)
 5ac:	dc400117 	ldw	r17,4(sp)
 5b0:	dc000017 	ldw	r16,0(sp)
 5b4:	dec00604 	addi	sp,sp,24
 5b8:	f800283a 	ret

000005bc <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 5bc:	defffa04 	addi	sp,sp,-24
 5c0:	dfc00515 	stw	ra,20(sp)
 5c4:	dd000415 	stw	r20,16(sp)
 5c8:	dcc00315 	stw	r19,12(sp)
 5cc:	dc800215 	stw	r18,8(sp)
 5d0:	dc400115 	stw	r17,4(sp)
 5d4:	dc000015 	stw	r16,0(sp)
 5d8:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
 5dc:	28001326 	beq	r5,zero,62c <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 5e0:	0140020e 	bge	zero,r5,5ec <alt_up_character_lcd_shift_cursor+0x30>
 5e4:	05000504 	movi	r20,20
 5e8:	00000106 	br	5f0 <alt_up_character_lcd_shift_cursor+0x34>
 5ec:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 5f0:	2800010e 	bge	r5,zero,5f8 <alt_up_character_lcd_shift_cursor+0x3c>
 5f4:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
 5f8:	00bfffc4 	movi	r2,-1
 5fc:	28a1883a 	add	r16,r5,r2
 600:	80c03fcc 	andi	r3,r16,255
 604:	10803fcc 	andi	r2,r2,255
 608:	18800826 	beq	r3,r2,62c <alt_up_character_lcd_shift_cursor+0x70>
 60c:	04bfffc4 	movi	r18,-1
 610:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 614:	9809883a 	mov	r4,r19
 618:	a1403fcc 	andi	r5,r20,255
 61c:	00004780 	call	478 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 620:	84a1883a 	add	r16,r16,r18
 624:	80803fcc 	andi	r2,r16,255
 628:	147ffa1e 	bne	r2,r17,614 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 62c:	dfc00517 	ldw	ra,20(sp)
 630:	dd000417 	ldw	r20,16(sp)
 634:	dcc00317 	ldw	r19,12(sp)
 638:	dc800217 	ldw	r18,8(sp)
 63c:	dc400117 	ldw	r17,4(sp)
 640:	dc000017 	ldw	r16,0(sp)
 644:	dec00604 	addi	sp,sp,24
 648:	f800283a 	ret

0000064c <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 64c:	defffe04 	addi	sp,sp,-8
 650:	dfc00115 	stw	ra,4(sp)
 654:	dc000015 	stw	r16,0(sp)
 658:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 65c:	008009c4 	movi	r2,39
 660:	11400a36 	bltu	r2,r5,68c <alt_up_character_lcd_set_cursor_pos+0x40>
 664:	00800044 	movi	r2,1
 668:	11800836 	bltu	r2,r6,68c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 66c:	2809883a 	mov	r4,r5
 670:	300b883a 	mov	r5,r6
 674:	00003b40 	call	3b4 <get_DDRAM_addr>
 678:	8009883a 	mov	r4,r16
 67c:	11403fcc 	andi	r5,r2,255
 680:	00004780 	call	478 <alt_up_character_lcd_send_cmd>
 684:	0005883a 	mov	r2,zero
 688:	00000106 	br	690 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
 68c:	00bfffc4 	movi	r2,-1
}
 690:	dfc00117 	ldw	ra,4(sp)
 694:	dc000017 	ldw	r16,0(sp)
 698:	dec00204 	addi	sp,sp,8
 69c:	f800283a 	ret

000006a0 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 6a0:	deffff04 	addi	sp,sp,-4
 6a4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 6a8:	01400034 	movhi	r5,0
 6ac:	29456704 	addi	r5,r5,5532
 6b0:	00009ec0 	call	9ec <alt_find_dev>

  return dev;
}
 6b4:	dfc00017 	ldw	ra,0(sp)
 6b8:	dec00104 	addi	sp,sp,4
 6bc:	f800283a 	ret

000006c0 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
 6c0:	200495ba 	slli	r2,r4,22
}
 6c4:	1005d7fa 	srai	r2,r2,31
 6c8:	f800283a 	ret

000006cc <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 6cc:	deffff04 	addi	sp,sp,-4
 6d0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 6d4:	01400034 	movhi	r5,0
 6d8:	29456704 	addi	r5,r5,5532
 6dc:	00009ec0 	call	9ec <alt_find_dev>

  return dev;
}
 6e0:	dfc00017 	ldw	ra,0(sp)
 6e4:	dec00104 	addi	sp,sp,4
 6e8:	f800283a 	ret

000006ec <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 6ec:	defffd04 	addi	sp,sp,-12
 6f0:	dfc00215 	stw	ra,8(sp)
 6f4:	dc400115 	stw	r17,4(sp)
 6f8:	dc000015 	stw	r16,0(sp)
 6fc:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 700:	20800a17 	ldw	r2,40(r4)
 704:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 708:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 70c:	8009883a 	mov	r4,r16
 710:	00006c00 	call	6c0 <alt_up_rs232_check_parity>
 714:	88800005 	stb	r2,0(r17)
 718:	8420000c 	andi	r16,r16,32768
 71c:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
 720:	80bfffc4 	addi	r2,r16,-1
 724:	dfc00217 	ldw	ra,8(sp)
 728:	dc400117 	ldw	r17,4(sp)
 72c:	dc000017 	ldw	r16,0(sp)
 730:	dec00304 	addi	sp,sp,12
 734:	f800283a 	ret

00000738 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 738:	defff904 	addi	sp,sp,-28
 73c:	dfc00615 	stw	ra,24(sp)
 740:	dd000515 	stw	r20,20(sp)
 744:	dcc00415 	stw	r19,16(sp)
 748:	dc800315 	stw	r18,12(sp)
 74c:	dc400215 	stw	r17,8(sp)
 750:	dc000115 	stw	r16,4(sp)
 754:	2821883a 	mov	r16,r5
 758:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 75c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 760:	3000021e 	bne	r6,zero,76c <alt_up_rs232_read_fd+0x34>
 764:	0025883a 	mov	r18,zero
 768:	00000a06 	br	794 <alt_up_rs232_read_fd+0x5c>
 76c:	0025883a 	mov	r18,zero
 770:	04400044 	movi	r17,1
 774:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 778:	8461883a 	add	r16,r16,r17
 77c:	9809883a 	mov	r4,r19
 780:	d80d883a 	mov	r6,sp
 784:	00006ec0 	call	6ec <alt_up_rs232_read_data>
 788:	1000021e 	bne	r2,zero,794 <alt_up_rs232_read_fd+0x5c>
			count++;
 78c:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 790:	a4bff81e 	bne	r20,r18,774 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
 794:	9005883a 	mov	r2,r18
 798:	dfc00617 	ldw	ra,24(sp)
 79c:	dd000517 	ldw	r20,20(sp)
 7a0:	dcc00417 	ldw	r19,16(sp)
 7a4:	dc800317 	ldw	r18,12(sp)
 7a8:	dc400217 	ldw	r17,8(sp)
 7ac:	dc000117 	ldw	r16,4(sp)
 7b0:	dec00704 	addi	sp,sp,28
 7b4:	f800283a 	ret

000007b8 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 7b8:	20800a17 	ldw	r2,40(r4)
 7bc:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
 7c0:	1004d43a 	srli	r2,r2,16
 7c4:	f800283a 	ret

000007c8 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 7c8:	20800a17 	ldw	r2,40(r4)
 7cc:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 7d0:	29403fcc 	andi	r5,r5,255
 7d4:	11400035 	stwio	r5,0(r2)
	return 0;
}
 7d8:	0005883a 	mov	r2,zero
 7dc:	f800283a 	ret

000007e0 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 7e0:	defffb04 	addi	sp,sp,-20
 7e4:	dfc00415 	stw	ra,16(sp)
 7e8:	dcc00315 	stw	r19,12(sp)
 7ec:	dc800215 	stw	r18,8(sp)
 7f0:	dc400115 	stw	r17,4(sp)
 7f4:	dc000015 	stw	r16,0(sp)
 7f8:	2827883a 	mov	r19,r5
 7fc:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 800:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
 804:	3000021e 	bne	r6,zero,810 <alt_up_rs232_write_fd+0x30>
 808:	0021883a 	mov	r16,zero
 80c:	00000806 	br	830 <alt_up_rs232_write_fd+0x50>
 810:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 814:	84c5883a 	add	r2,r16,r19
 818:	8809883a 	mov	r4,r17
 81c:	11400003 	ldbu	r5,0(r2)
 820:	00007c80 	call	7c8 <alt_up_rs232_write_data>
 824:	1000021e 	bne	r2,zero,830 <alt_up_rs232_write_fd+0x50>
		{
			count++;
 828:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 82c:	943ff91e 	bne	r18,r16,814 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
 830:	8005883a 	mov	r2,r16
 834:	dfc00417 	ldw	ra,16(sp)
 838:	dcc00317 	ldw	r19,12(sp)
 83c:	dc800217 	ldw	r18,8(sp)
 840:	dc400117 	ldw	r17,4(sp)
 844:	dc000017 	ldw	r16,0(sp)
 848:	dec00504 	addi	sp,sp,20
 84c:	f800283a 	ret

00000850 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 850:	20800a17 	ldw	r2,40(r4)
 854:	10800104 	addi	r2,r2,4
 858:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 85c:	013fff84 	movi	r4,-2
 860:	1906703a 	and	r3,r3,r4
 864:	10c00035 	stwio	r3,0(r2)
}
 868:	f800283a 	ret

0000086c <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 86c:	20c00a17 	ldw	r3,40(r4)
 870:	18c00104 	addi	r3,r3,4
 874:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 878:	10800054 	ori	r2,r2,1
 87c:	18800035 	stwio	r2,0(r3)
}
 880:	f800283a 	ret

00000884 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 884:	20800a17 	ldw	r2,40(r4)
 888:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
 88c:	10bfffcc 	andi	r2,r2,65535
 890:	f800283a 	ret

00000894 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 894:	defffd04 	addi	sp,sp,-12
 898:	dfc00215 	stw	ra,8(sp)
 89c:	dc400115 	stw	r17,4(sp)
 8a0:	dc000015 	stw	r16,0(sp)
 8a4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8a8:	20001c16 	blt	r4,zero,91c <close+0x88>
 8ac:	20c00324 	muli	r3,r4,12
 8b0:	00800034 	movhi	r2,0
 8b4:	10840504 	addi	r2,r2,4116
 8b8:	1889883a 	add	r4,r3,r2

  if (fd)
 8bc:	20001726 	beq	r4,zero,91c <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8c0:	20800017 	ldw	r2,0(r4)
 8c4:	10800417 	ldw	r2,16(r2)
 8c8:	10002126 	beq	r2,zero,950 <close+0xbc>
 8cc:	103ee83a 	callr	r2
 8d0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8d4:	8009883a 	mov	r4,r16
 8d8:	0000b380 	call	b38 <alt_release_fd>
    if (rval < 0)
 8dc:	88000216 	blt	r17,zero,8e8 <close+0x54>
 8e0:	0005883a 	mov	r2,zero
 8e4:	00001d06 	br	95c <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 8e8:	00800034 	movhi	r2,0
 8ec:	10856a04 	addi	r2,r2,5544
 8f0:	10800017 	ldw	r2,0(r2)
 8f4:	1000031e 	bne	r2,zero,904 <close+0x70>
 8f8:	00c00034 	movhi	r3,0
 8fc:	18c70104 	addi	r3,r3,7172
 900:	00000206 	br	90c <close+0x78>
 904:	103ee83a 	callr	r2
 908:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
 90c:	0445c83a 	sub	r2,zero,r17
 910:	18800015 	stw	r2,0(r3)
 914:	00bfffc4 	movi	r2,-1
 918:	00001006 	br	95c <close+0xc8>
 91c:	00800034 	movhi	r2,0
 920:	10856a04 	addi	r2,r2,5544
 924:	10800017 	ldw	r2,0(r2)
 928:	1000031e 	bne	r2,zero,938 <close+0xa4>
 92c:	00c00034 	movhi	r3,0
 930:	18c70104 	addi	r3,r3,7172
 934:	00000206 	br	940 <close+0xac>
 938:	103ee83a 	callr	r2
 93c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 940:	00801444 	movi	r2,81
 944:	18800015 	stw	r2,0(r3)
 948:	00bfffc4 	movi	r2,-1
 94c:	00000306 	br	95c <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 950:	8009883a 	mov	r4,r16
 954:	0000b380 	call	b38 <alt_release_fd>
 958:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 95c:	dfc00217 	ldw	ra,8(sp)
 960:	dc400117 	ldw	r17,4(sp)
 964:	dc000017 	ldw	r16,0(sp)
 968:	dec00304 	addi	sp,sp,12
 96c:	f800283a 	ret

00000970 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 970:	f800283a 	ret

00000974 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 974:	3005883a 	mov	r2,r6
 978:	f800283a 	ret

0000097c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 97c:	deffff04 	addi	sp,sp,-4
 980:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 984:	20000226 	beq	r4,zero,990 <alt_dev_llist_insert+0x14>
 988:	20800217 	ldw	r2,8(r4)
 98c:	10000d1e 	bne	r2,zero,9c4 <alt_dev_llist_insert+0x48>
 990:	00800034 	movhi	r2,0
 994:	10856a04 	addi	r2,r2,5544
 998:	10800017 	ldw	r2,0(r2)
 99c:	1000031e 	bne	r2,zero,9ac <alt_dev_llist_insert+0x30>
 9a0:	00c00034 	movhi	r3,0
 9a4:	18c70104 	addi	r3,r3,7172
 9a8:	00000206 	br	9b4 <alt_dev_llist_insert+0x38>
 9ac:	103ee83a 	callr	r2
 9b0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
 9b4:	00800584 	movi	r2,22
 9b8:	18800015 	stw	r2,0(r3)
 9bc:	00bffa84 	movi	r2,-22
 9c0:	00000706 	br	9e0 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 9c4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 9c8:	28800017 	ldw	r2,0(r5)
 9cc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 9d0:	28800017 	ldw	r2,0(r5)
 9d4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 9d8:	29000015 	stw	r4,0(r5)
 9dc:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 9e0:	dfc00017 	ldw	ra,0(sp)
 9e4:	dec00104 	addi	sp,sp,4
 9e8:	f800283a 	ret

000009ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 9ec:	defffb04 	addi	sp,sp,-20
 9f0:	dfc00415 	stw	ra,16(sp)
 9f4:	dcc00315 	stw	r19,12(sp)
 9f8:	dc800215 	stw	r18,8(sp)
 9fc:	dc400115 	stw	r17,4(sp)
 a00:	dc000015 	stw	r16,0(sp)
 a04:	2027883a 	mov	r19,r4
 a08:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
 a0c:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 a10:	0000d2c0 	call	d2c <strlen>
 a14:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 a18:	8c000726 	beq	r17,r16,a38 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 a1c:	89000217 	ldw	r4,8(r17)
 a20:	980b883a 	mov	r5,r19
 a24:	900d883a 	mov	r6,r18
 a28:	0000cb80 	call	cb8 <memcmp>
 a2c:	10000326 	beq	r2,zero,a3c <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 a30:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 a34:	847ff91e 	bne	r16,r17,a1c <alt_find_dev+0x30>
 a38:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
 a3c:	8805883a 	mov	r2,r17
 a40:	dfc00417 	ldw	ra,16(sp)
 a44:	dcc00317 	ldw	r19,12(sp)
 a48:	dc800217 	ldw	r18,8(sp)
 a4c:	dc400117 	ldw	r17,4(sp)
 a50:	dc000017 	ldw	r16,0(sp)
 a54:	dec00504 	addi	sp,sp,20
 a58:	f800283a 	ret

00000a5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 a5c:	deffff04 	addi	sp,sp,-4
 a60:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 a64:	0009883a 	mov	r4,zero
 a68:	01440004 	movi	r5,4096
 a6c:	0000c440 	call	c44 <alt_icache_flush>
#endif
}
 a70:	dfc00017 	ldw	ra,0(sp)
 a74:	dec00104 	addi	sp,sp,4
 a78:	f800283a 	ret

00000a7c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 a7c:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a80:	008007c4 	movi	r2,31
 a84:	1100022e 	bgeu	r2,r4,a90 <alt_irq_register+0x14>
 a88:	00bffa84 	movi	r2,-22
 a8c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a90:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a94:	013fff84 	movi	r4,-2
 a98:	4104703a 	and	r2,r8,r4
 a9c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 aa0:	380490fa 	slli	r2,r7,3
 aa4:	00c00034 	movhi	r3,0
 aa8:	18c70204 	addi	r3,r3,7176
 aac:	10c5883a 	add	r2,r2,r3
 ab0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
 ab4:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 ab8:	30000e26 	beq	r6,zero,af4 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 abc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 ac0:	2904703a 	and	r2,r5,r4
 ac4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 ac8:	00c00034 	movhi	r3,0
 acc:	18c6fe04 	addi	r3,r3,7160
 ad0:	19000017 	ldw	r4,0(r3)
 ad4:	00800044 	movi	r2,1
 ad8:	11c4983a 	sll	r2,r2,r7
 adc:	1104b03a 	or	r2,r2,r4
 ae0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 ae4:	18800017 	ldw	r2,0(r3)
 ae8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 aec:	2801703a 	wrctl	status,r5
 af0:	00000e06 	br	b2c <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 af4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 af8:	00bfff84 	movi	r2,-2
 afc:	2884703a 	and	r2,r5,r2
 b00:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 b04:	00c00034 	movhi	r3,0
 b08:	18c6fe04 	addi	r3,r3,7160
 b0c:	19000017 	ldw	r4,0(r3)
 b10:	00bfff84 	movi	r2,-2
 b14:	11c4183a 	rol	r2,r2,r7
 b18:	1104703a 	and	r2,r2,r4
 b1c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 b20:	18800017 	ldw	r2,0(r3)
 b24:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 b28:	2801703a 	wrctl	status,r5
 b2c:	4001703a 	wrctl	status,r8
 b30:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
 b34:	f800283a 	ret

00000b38 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 b38:	00800084 	movi	r2,2
 b3c:	1100060e 	bge	r2,r4,b58 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
 b40:	20800324 	muli	r2,r4,12
 b44:	00c00034 	movhi	r3,0
 b48:	18c40504 	addi	r3,r3,4116
 b4c:	10c5883a 	add	r2,r2,r3
 b50:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
 b54:	10000015 	stw	zero,0(r2)
 b58:	f800283a 	ret

00000b5c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 b5c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 b60:	00bfff84 	movi	r2,-2
 b64:	2884703a 	and	r2,r5,r2
 b68:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 b6c:	20c00017 	ldw	r3,0(r4)
 b70:	20800117 	ldw	r2,4(r4)
 b74:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 b78:	20800117 	ldw	r2,4(r4)
 b7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 b80:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 b84:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 b88:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 b8c:	f800283a 	ret

00000b90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 b90:	defffd04 	addi	sp,sp,-12
 b94:	dfc00215 	stw	ra,8(sp)
 b98:	dc400115 	stw	r17,4(sp)
 b9c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 ba0:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 ba4:	d0a19b17 	ldw	r2,-31124(gp)
 ba8:	10800044 	addi	r2,r2,1
 bac:	d0a19b15 	stw	r2,-31124(gp)
 bb0:	00001b06 	br	c20 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 bb4:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 bb8:	80800403 	ldbu	r2,16(r16)
 bbc:	10000326 	beq	r2,zero,bcc <alt_tick+0x3c>
 bc0:	d0a19b17 	ldw	r2,-31124(gp)
 bc4:	1000011e 	bne	r2,zero,bcc <alt_tick+0x3c>
    {
      alarm->rollover = 0;
 bc8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 bcc:	d0e19b17 	ldw	r3,-31124(gp)
 bd0:	80800217 	ldw	r2,8(r16)
 bd4:	18801136 	bltu	r3,r2,c1c <alt_tick+0x8c>
 bd8:	80800403 	ldbu	r2,16(r16)
 bdc:	10000f1e 	bne	r2,zero,c1c <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
 be0:	80800317 	ldw	r2,12(r16)
 be4:	81000517 	ldw	r4,20(r16)
 be8:	103ee83a 	callr	r2
 bec:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 bf0:	1000031e 	bne	r2,zero,c00 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
 bf4:	8009883a 	mov	r4,r16
 bf8:	0000b5c0 	call	b5c <alt_alarm_stop>
 bfc:	00000706 	br	c1c <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
 c00:	80800217 	ldw	r2,8(r16)
 c04:	1885883a 	add	r2,r3,r2
 c08:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c0c:	d0e19b17 	ldw	r3,-31124(gp)
 c10:	10c0022e 	bgeu	r2,r3,c1c <alt_tick+0x8c>
        {
          alarm->rollover = 1;
 c14:	00800044 	movi	r2,1
 c18:	80800405 	stb	r2,16(r16)
 c1c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c20:	d0a00704 	addi	r2,gp,-32740
 c24:	80bfe31e 	bne	r16,r2,bb4 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 c28:	dfc00217 	ldw	ra,8(sp)
 c2c:	dc400117 	ldw	r17,4(sp)
 c30:	dc000017 	ldw	r16,0(sp)
 c34:	dec00304 	addi	sp,sp,12
 c38:	f800283a 	ret

00000c3c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c3c:	000170fa 	wrctl	ienable,zero
}
 c40:	f800283a 	ret

00000c44 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 c44:	2007883a 	mov	r3,r4
 c48:	00840004 	movi	r2,4096
 c4c:	1140012e 	bgeu	r2,r5,c54 <alt_icache_flush+0x10>
 c50:	100b883a 	mov	r5,r2
 c54:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 c58:	1940042e 	bgeu	r3,r5,c6c <alt_icache_flush+0x28>
 c5c:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 c60:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 c64:	1887883a 	add	r3,r3,r2
 c68:	197ffd36 	bltu	r3,r5,c60 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 c6c:	208007cc 	andi	r2,r4,31
 c70:	10000126 	beq	r2,zero,c78 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 c74:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 c78:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 c7c:	f800283a 	ret

00000c80 <exit>:
 c80:	defffe04 	addi	sp,sp,-8
 c84:	000b883a 	mov	r5,zero
 c88:	dc000015 	stw	r16,0(sp)
 c8c:	dfc00115 	stw	ra,4(sp)
 c90:	2021883a 	mov	r16,r4
 c94:	0000da40 	call	da4 <__call_exitprocs>
 c98:	00800034 	movhi	r2,0
 c9c:	10856f04 	addi	r2,r2,5564
 ca0:	11000017 	ldw	r4,0(r2)
 ca4:	20800f17 	ldw	r2,60(r4)
 ca8:	10000126 	beq	r2,zero,cb0 <exit+0x30>
 cac:	103ee83a 	callr	r2
 cb0:	8009883a 	mov	r4,r16
 cb4:	0000f540 	call	f54 <_exit>

00000cb8 <memcmp>:
 cb8:	00c000c4 	movi	r3,3
 cbc:	1980032e 	bgeu	r3,r6,ccc <memcmp+0x14>
 cc0:	2144b03a 	or	r2,r4,r5
 cc4:	10c4703a 	and	r2,r2,r3
 cc8:	10000f26 	beq	r2,zero,d08 <memcmp+0x50>
 ccc:	31ffffc4 	addi	r7,r6,-1
 cd0:	3000061e 	bne	r6,zero,cec <memcmp+0x34>
 cd4:	00000a06 	br	d00 <memcmp+0x48>
 cd8:	39ffffc4 	addi	r7,r7,-1
 cdc:	00bfffc4 	movi	r2,-1
 ce0:	21000044 	addi	r4,r4,1
 ce4:	29400044 	addi	r5,r5,1
 ce8:	38800526 	beq	r7,r2,d00 <memcmp+0x48>
 cec:	20c00003 	ldbu	r3,0(r4)
 cf0:	28800003 	ldbu	r2,0(r5)
 cf4:	18bff826 	beq	r3,r2,cd8 <memcmp+0x20>
 cf8:	1885c83a 	sub	r2,r3,r2
 cfc:	f800283a 	ret
 d00:	0005883a 	mov	r2,zero
 d04:	f800283a 	ret
 d08:	180f883a 	mov	r7,r3
 d0c:	20c00017 	ldw	r3,0(r4)
 d10:	28800017 	ldw	r2,0(r5)
 d14:	18bfed1e 	bne	r3,r2,ccc <memcmp+0x14>
 d18:	31bfff04 	addi	r6,r6,-4
 d1c:	21000104 	addi	r4,r4,4
 d20:	29400104 	addi	r5,r5,4
 d24:	39bff936 	bltu	r7,r6,d0c <memcmp+0x54>
 d28:	003fe806 	br	ccc <memcmp+0x14>

00000d2c <strlen>:
 d2c:	208000cc 	andi	r2,r4,3
 d30:	2011883a 	mov	r8,r4
 d34:	1000161e 	bne	r2,zero,d90 <strlen+0x64>
 d38:	20c00017 	ldw	r3,0(r4)
 d3c:	017fbff4 	movhi	r5,65279
 d40:	297fbfc4 	addi	r5,r5,-257
 d44:	01e02074 	movhi	r7,32897
 d48:	39e02004 	addi	r7,r7,-32640
 d4c:	1945883a 	add	r2,r3,r5
 d50:	11c4703a 	and	r2,r2,r7
 d54:	00c6303a 	nor	r3,zero,r3
 d58:	1886703a 	and	r3,r3,r2
 d5c:	18000c1e 	bne	r3,zero,d90 <strlen+0x64>
 d60:	280d883a 	mov	r6,r5
 d64:	380b883a 	mov	r5,r7
 d68:	21000104 	addi	r4,r4,4
 d6c:	20800017 	ldw	r2,0(r4)
 d70:	1187883a 	add	r3,r2,r6
 d74:	1946703a 	and	r3,r3,r5
 d78:	0084303a 	nor	r2,zero,r2
 d7c:	10c4703a 	and	r2,r2,r3
 d80:	103ff926 	beq	r2,zero,d68 <strlen+0x3c>
 d84:	20800007 	ldb	r2,0(r4)
 d88:	10000326 	beq	r2,zero,d98 <strlen+0x6c>
 d8c:	21000044 	addi	r4,r4,1
 d90:	20800007 	ldb	r2,0(r4)
 d94:	103ffd1e 	bne	r2,zero,d8c <strlen+0x60>
 d98:	2205c83a 	sub	r2,r4,r8
 d9c:	f800283a 	ret

00000da0 <register_fini>:
 da0:	f800283a 	ret

00000da4 <__call_exitprocs>:
 da4:	00800034 	movhi	r2,0
 da8:	10856f04 	addi	r2,r2,5564
 dac:	10800017 	ldw	r2,0(r2)
 db0:	defff304 	addi	sp,sp,-52
 db4:	df000b15 	stw	fp,44(sp)
 db8:	d8800115 	stw	r2,4(sp)
 dbc:	00800034 	movhi	r2,0
 dc0:	10800004 	addi	r2,r2,0
 dc4:	1005003a 	cmpeq	r2,r2,zero
 dc8:	d8800215 	stw	r2,8(sp)
 dcc:	d8800117 	ldw	r2,4(sp)
 dd0:	dd400815 	stw	r21,32(sp)
 dd4:	dd000715 	stw	r20,28(sp)
 dd8:	10805204 	addi	r2,r2,328
 ddc:	dfc00c15 	stw	ra,48(sp)
 de0:	ddc00a15 	stw	r23,40(sp)
 de4:	dd800915 	stw	r22,36(sp)
 de8:	dcc00615 	stw	r19,24(sp)
 dec:	dc800515 	stw	r18,20(sp)
 df0:	dc400415 	stw	r17,16(sp)
 df4:	dc000315 	stw	r16,12(sp)
 df8:	282b883a 	mov	r21,r5
 dfc:	2039883a 	mov	fp,r4
 e00:	d8800015 	stw	r2,0(sp)
 e04:	2829003a 	cmpeq	r20,r5,zero
 e08:	d8800117 	ldw	r2,4(sp)
 e0c:	14405217 	ldw	r17,328(r2)
 e10:	88001026 	beq	r17,zero,e54 <__call_exitprocs+0xb0>
 e14:	ddc00017 	ldw	r23,0(sp)
 e18:	88800117 	ldw	r2,4(r17)
 e1c:	8c802204 	addi	r18,r17,136
 e20:	143fffc4 	addi	r16,r2,-1
 e24:	80000916 	blt	r16,zero,e4c <__call_exitprocs+0xa8>
 e28:	05bfffc4 	movi	r22,-1
 e2c:	a000151e 	bne	r20,zero,e84 <__call_exitprocs+0xe0>
 e30:	8409883a 	add	r4,r16,r16
 e34:	2105883a 	add	r2,r4,r4
 e38:	1485883a 	add	r2,r2,r18
 e3c:	10c02017 	ldw	r3,128(r2)
 e40:	a8c01126 	beq	r21,r3,e88 <__call_exitprocs+0xe4>
 e44:	843fffc4 	addi	r16,r16,-1
 e48:	85bff81e 	bne	r16,r22,e2c <__call_exitprocs+0x88>
 e4c:	d8800217 	ldw	r2,8(sp)
 e50:	10003126 	beq	r2,zero,f18 <__call_exitprocs+0x174>
 e54:	dfc00c17 	ldw	ra,48(sp)
 e58:	df000b17 	ldw	fp,44(sp)
 e5c:	ddc00a17 	ldw	r23,40(sp)
 e60:	dd800917 	ldw	r22,36(sp)
 e64:	dd400817 	ldw	r21,32(sp)
 e68:	dd000717 	ldw	r20,28(sp)
 e6c:	dcc00617 	ldw	r19,24(sp)
 e70:	dc800517 	ldw	r18,20(sp)
 e74:	dc400417 	ldw	r17,16(sp)
 e78:	dc000317 	ldw	r16,12(sp)
 e7c:	dec00d04 	addi	sp,sp,52
 e80:	f800283a 	ret
 e84:	8409883a 	add	r4,r16,r16
 e88:	88c00117 	ldw	r3,4(r17)
 e8c:	2105883a 	add	r2,r4,r4
 e90:	1445883a 	add	r2,r2,r17
 e94:	18ffffc4 	addi	r3,r3,-1
 e98:	11800217 	ldw	r6,8(r2)
 e9c:	1c001526 	beq	r3,r16,ef4 <__call_exitprocs+0x150>
 ea0:	10000215 	stw	zero,8(r2)
 ea4:	303fe726 	beq	r6,zero,e44 <__call_exitprocs+0xa0>
 ea8:	00c00044 	movi	r3,1
 eac:	1c06983a 	sll	r3,r3,r16
 eb0:	90804017 	ldw	r2,256(r18)
 eb4:	8cc00117 	ldw	r19,4(r17)
 eb8:	1884703a 	and	r2,r3,r2
 ebc:	10001426 	beq	r2,zero,f10 <__call_exitprocs+0x16c>
 ec0:	90804117 	ldw	r2,260(r18)
 ec4:	1884703a 	and	r2,r3,r2
 ec8:	10000c1e 	bne	r2,zero,efc <__call_exitprocs+0x158>
 ecc:	2105883a 	add	r2,r4,r4
 ed0:	1485883a 	add	r2,r2,r18
 ed4:	11400017 	ldw	r5,0(r2)
 ed8:	e009883a 	mov	r4,fp
 edc:	303ee83a 	callr	r6
 ee0:	88800117 	ldw	r2,4(r17)
 ee4:	98bfc81e 	bne	r19,r2,e08 <__call_exitprocs+0x64>
 ee8:	b8800017 	ldw	r2,0(r23)
 eec:	147fd526 	beq	r2,r17,e44 <__call_exitprocs+0xa0>
 ef0:	003fc506 	br	e08 <__call_exitprocs+0x64>
 ef4:	8c000115 	stw	r16,4(r17)
 ef8:	003fea06 	br	ea4 <__call_exitprocs+0x100>
 efc:	2105883a 	add	r2,r4,r4
 f00:	1485883a 	add	r2,r2,r18
 f04:	11000017 	ldw	r4,0(r2)
 f08:	303ee83a 	callr	r6
 f0c:	003ff406 	br	ee0 <__call_exitprocs+0x13c>
 f10:	303ee83a 	callr	r6
 f14:	003ff206 	br	ee0 <__call_exitprocs+0x13c>
 f18:	88800117 	ldw	r2,4(r17)
 f1c:	1000081e 	bne	r2,zero,f40 <__call_exitprocs+0x19c>
 f20:	89000017 	ldw	r4,0(r17)
 f24:	20000726 	beq	r4,zero,f44 <__call_exitprocs+0x1a0>
 f28:	b9000015 	stw	r4,0(r23)
 f2c:	8809883a 	mov	r4,r17
 f30:	00000000 	call	0 <__alt_mem_RAM>
 f34:	bc400017 	ldw	r17,0(r23)
 f38:	883fb71e 	bne	r17,zero,e18 <__call_exitprocs+0x74>
 f3c:	003fc506 	br	e54 <__call_exitprocs+0xb0>
 f40:	89000017 	ldw	r4,0(r17)
 f44:	882f883a 	mov	r23,r17
 f48:	2023883a 	mov	r17,r4
 f4c:	883fb21e 	bne	r17,zero,e18 <__call_exitprocs+0x74>
 f50:	003fc006 	br	e54 <__call_exitprocs+0xb0>

00000f54 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 f54:	20000226 	beq	r4,zero,f60 <_exit+0xc>
    ALT_SIM_FAIL();
 f58:	002af070 	cmpltui	zero,zero,43969
 f5c:	00000106 	br	f64 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
 f60:	002af0b0 	cmpltui	zero,zero,43970
 f64:	003fff06 	br	f64 <_exit+0x10>
 f68:	00000da0 	cmpeqi	zero,zero,54
